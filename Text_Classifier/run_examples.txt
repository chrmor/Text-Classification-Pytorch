Example runs

Evaluating a pre-trained model:

Training and evaluating a model and save it:

python main.py --cuda True --load_model False --save_model True --num_epochs 6 --nn_model CNN --y_start 2017 --y_end 2017
 --dataset 30-fold-8-classes --fold 1

python main.py --cuda False --load_model True --save_model False --num_epochs 6 --nn_model CNN --y_start 2017 --y_end 2017
 --dataset 30-fold-8-classes --fold 1 --do_training False

Further train a pre-trained model and save it:

python main.py --cuda False --load_model True --load_model_name CNN_1000_glove-6B_300_3_20_0.001_dataset-30-fold-8-classes_fold-1 --save_model True --save_model_name CNN_1000_glove-6B_300_6_20_0.001_dataset-30-fold-8-classes_fold-1 --num_epochs 3 --nn_model CNN --y_start 2017 --y_end 2017 --dataset 30-fold-8-classes --do_eval False



Other examples:

python main.py --cuda True --load_model True --load_model_name RCNN_1000_glove-6B_300_4_20_0.001_dataset-30-fold-8-classes-2010-2018 --save_model True --save_model_name RCNN_1000_glove-6B_300_5_20_0.001_dataset-30-fold-8-classes_fold-2 --num_epochs 1 --nn_model CNN --y_start 2010 --y_end 2018 --dataset 30-fold-8-classes --do_eval False --fold 2 --ths 0.1


python main.py --cuda True --load_model True --load_model_name RCNN_1000_glove-6B_300_5_15_0.001_dataset-30-fold-9-classes_fold-1 --save_model True --save_model_name RCNN_1000_glove-6B_300_7_15_0.001_dataset-30-fold-9-classes_fold-1 --num_epochs 2 --nn_model RCNN --y_start 2010 --y_end 2018 --dataset 30-fold-9-classes --do_eval True --fold 1 --ths 0.1

